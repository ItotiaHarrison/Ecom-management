generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Products {
  productId     String      @id
  name          String
  price         Float
  stockQuantity Int
  imageUrl       String?
  categories    ProductCategory[]
  Purchases     Purchases[]
  Sales         Sales[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model ProductCategory {
  categoryId   String     @id
  name         String
  description  String?
  products     Products[] 
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Sales {
  saleId      String   @id
  productId   String
  timestamp   DateTime
  quantity    Int
  unitPrice   Float
  totalAmount Float
  product     Products @relation(fields: [productId], references: [productId])
}

model Purchases {
  purchaseId String   @id
  productId  String
  timestamp  DateTime
  quantity   Int
  unitCost   Float
  totalCost  Float
  product    Products @relation(fields: [productId], references: [productId])
}

model Expenses {
  expenseId String   @id
  category  String
  amount    Float
  timestamp DateTime
}

model SalesSummary {
  salesSummaryId   String   @id
  totalValue       Float
  changePercentage Float?
  date             DateTime
}

model PurchaseSummary {
  purchaseSummaryId String   @id
  totalPurchased    Float
  changePercentage  Float?
  date              DateTime
}

model ExpenseSummary {
  expenseSummaryId  String              @id
  totalExpenses     Float
  date              DateTime
  ExpenseByCategory ExpenseByCategory[]
}

model ExpenseByCategory {
  expenseByCategoryId String         @id
  expenseSummaryId    String
  category            String
  amount              BigInt
  date                DateTime
  expenseSummary      ExpenseSummary @relation(fields: [expenseSummaryId], references: [expenseSummaryId])
}

model Address {
  id      String  @id
  label   String?
  street  String
  city    String
  state   String
  zipCode String
  country String
  userId  String
  User    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id        String      @id
  date      DateTime    @default(now())
  status    OrderStatus @default(PENDING)
  total     Float
  userId    String
  User      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  OrderItem OrderItem[]
}

model OrderItem {
  id       String @id
  name     String
  quantity Int
  price    Float
  orderId  String
  Order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model User {
  id        String    @id
  email     String    @unique
  name      String
  password  String
  phone     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime
  Address   Address[]
  Order     Order[]
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
